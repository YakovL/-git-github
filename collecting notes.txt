History stuff:
First, this repo was created at github.
Next, I've created a local repo (`git init`; `git remote add origin https://github.com/YakovL/-git-github.git`),
  created this file, added it (`git add '.\collecting notes.txt'`; `git commit -m "add the main file"`),
  pushed to github (`git push -u origin master`; an unexpected UI appeared for credentials input).
I've edited this file at github – made 3 commits. Commiting directly to the master branch.
To update the local repo, I've used `git pull origin master` (params are "from where", "what"); updated this text accordingly;
  added and commited (`git commit -a -m "describe local repo updating"`); pushed again.
To create a new branch locally, used `git checkout -b local-originated-branch`; used `git branch -D local-originated-branch` to delete that one.
Now created another branch `small-change`. Made a change inside it. Switching between branches using `git checkout ...` doesn't
  change the files. But, once I added these changes and committed to that branch, switching between branches does change files.
  (haven't tested if this is due to adding or committing)
Let's merge these changes to master. `git checkout master` – we're there now. `git merge small-change` – done!
  (`git push` is now enough to update the remote repo).
Now let's create a branch at GitHub and further merge it. Creating is simple: just select a new branch when saving edits. Ouch.
  Nope, it is not: GitHub only allows to create a branch /and/ a pull request from here. Branch may be deleted from the code tab,
  branches subtab.
  Let's create a branch from the main code page of the repo.. and make a small change. At GitHub, unlike locally with git,
  one can't merge directly from one branch to another, even both of them are in their repo – instead, first a pull request is done from
  the branch we want to merge or the "Pull requests" tab. "base" is where we want merge to, and "compare" is where we want to merge from.
  There's a number of other stuff unnecessary when merging our own changes: several comment fields a new commit per merge.
(created the YLTW branch of TWc, merged all the fixes commited for now from all branches to that one)
Pulled YLTW branch to the local repo by using `git pull origin YLTW`.
Used `git branch` to see what branch is used ("remote branches" are shown with `git branch -a` and YLTW is among them).
  Used `git checkout YLTW` to change the branch (now that branch is listed among "non-remote" branches).

Goals:
* TWc core: try to cook YLTW in the local repo; make the rest fixes + pull requests
* MTS: publish at GitHub + [.oO what if someone contributes?] + implement secure autoupdate of MTS from the repo;
  incorporate git support for content: sync with remote server with git support (push, autopull) [.oO more scenarios]
* CS: install git at VPN, learn how to ~push there (install gitlab if necessary), set up "1 dev + 1 ~PM" workflow; ...
* TWc extensions: publish at GitHub + [.oO what if someone contributes? especially to a cooked plugin] + update by request directly from TW (+MTS)
* create an introductory to git/github/+TWc doc for collaborators

Targets, questions, next steps:
* merge/remove elder notes (in material_flows)
* learn how to copy branches from local repo to GitHub and vice versa, what is local and remote branches, test thoroughly
  (related: `git fetch --all`, `git pull origin branch_name`; `git push --all origin` or `git push origin branch_name`; `git branch [-r|-a]`)
* learn how to make this file ~look formatted~:
** at github (man, I don't like that code bits look the same as ordinary text here, it's a git/github notes hub!)
** locally.. preferrably in form of a TiddlyWiki (merge with notes in studies!)
* simplify workflow: for now, editing requires an opened shell/cmd for git stuff, an editor for the file, optionally a file manager (at least we have to navigate to the project via shell/cmd) and also a browser if we want to check the result
** what's more important, this is not automated, so I have to remember to push/pull after each edit
*** when working locally, checking changes at the remote repo seems to work when done like this:
    (`git checkout master` if not there,) `git fetch`, `git diff origin/master`
*** not sure what to do with the opposite direction
*** automate!  (use cron or an analogue)
** it's not handy to open shell/cmd after reopening a file from "recent" (see notepad++ extensions, though)
* learn how to work with git for folders with binary, analogues for DBs/coding; if there's sane analogues of git for text files
** describe in more details my idea of ~git for binaries with history support~
* create another GitHub account, "collaborate" on this doc (do  pull request + merge  differ from those when merging my own branches?)

Other notes:
* some options for creating project central repo (aside GitHub):
** usually the server that allows to pull from/push to etc is called git-service
** it's possible to setup a git-service with git only, see https://git-scm.com/book/ru/v1/Git-на-сервере, but there won't be any web-interface and few peolpe do so these days
** one of the most popular self-hosted git-services: GitLab. There's also a non-self-hosted version (https://about.gitlab.com),
   free version has some ~minor limitations but allows to host private repos
** another option is Gogs (https://habrahabr.ru/company/selectel/blog/305422/ claims it requires much less resources than GitLab)
* looks like github doesn't allow to put several edits to one commit, each file edit makes a commit
* some more sources about git/github:
** https://ancatmara.gitbooks.io/digital-literacy/chapter1.html (also describes usage of some tools)
** https://git-scm.com/book/ru/v1 (may be useful if more consistency needed)
* GitHub suggests adding to repository:
** README: https://github.com/YakovL/-git-github/new/master?readme=1
** LICENSE: https://github.com/YakovL/-git-github/new/master?filename=LICENSE.md
** .gitignore: https://github.com/YakovL/-git-github/new/master?filename=.gitignore
* "stupid" questions, misconceptions that I had:
** is it possible to push certain commits instead of a whole branch?
** git push origin master : origin = to, master = from (name of local repo)
